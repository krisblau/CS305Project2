#BlueJ class context
comment0.target=SenderTransport
comment0.text=\n\ A\ class\ which\ represents\ the\ receiver\ transport\ layer\n\ \n\ test\ run\ string\:\ {"test.txt",\ "5",\ "0",\ ".20","0","0","0"}\n
comment1.params=nl
comment1.target=SenderTransport(NetworkLayer)
comment10.params=pkt
comment10.target=void\ gbnReceive(Packet)
comment10.text=\ Code\ for\ ^\n\ \ \ \ \ \ \ \ else\ if\ (queued.size()\ >\ 0)\n\ \ \ \ \ \ \ \ {\n\ \ \ \ \ \ \ \ \ \ \ \ queued.add(msg);\n\ \ \ \ \ \ \ \ \ \ \ \ Packet\ pkt\ \=\ new\ Packet(queued.get(0),\ seq,\ ack,\ 0);\n\ \ \ \ \ \ \ \ \ \ \ \ ack++;\n\ \ \ \ \ \ \ \ \ \ \ \ sentMessages.add(queued.get(0).getMessage());\n\ \ \ \ \ \ \ \ \ \ \ \ queued.remove(0);\n\ \ \ \ \ \ \ \ \ \ \ \ nl.sendPacket(pkt,\ 1);\n\ \ \ \ \ \ \ \ }\n
comment11.params=
comment11.target=void\ gbnResend()
comment12.params=msg
comment12.target=void\ tcp(Message)
comment12.text=\n\ Works\ much\ the\ same\ way\ as\ gbn\ as\ far\ as\ sending.\ Packet\ is\ simply\ created\ and\ sent\ on.\ \n
comment13.params=pkt
comment13.target=void\ tcpReceive(Packet)
comment13.text=\n\ \n
comment14.params=nextSeq
comment14.target=void\ tcpResend(int)
comment2.params=
comment2.target=void\ initialize()
comment2.text=\n\ This\ routine\ will\ be\ called\ once,\ before\ any\ of\ your\ other\ sender\ routines\ are\ called.\ It\ can\ be\ used\ to\ do\ any\ required\ initialization\n
comment3.params=msg
comment3.target=void\ sendMessage(Message)
comment3.text=\n\ where\ message\ contains\ data\ to\ be\ sent\ to\ the\ B-side.\ This\ routine\ will\ be\ called\ whenever\ the\ upper\ layer\ at\ the\ sending\ side\ has\ a\ message\ to\ send.\ \n\ It\ is\ the\ job\ of\ your\ protocol\ to\ insure\ that\ the\ data\ in\ such\ a\ message\ is\ delivered\ in-order,\ and\ correctly,\ to\ the\ receiving\ side\ upper\ layer\n
comment4.params=pkt
comment4.target=void\ receiveMessage(Packet)
comment4.text=\n\ where\ packet\ is\ a\ structure\ of\ type\ pkt.\ This\ routine\ will\ be\ called\ whenever\ a\ packet\ sent\ from\ the\ receiver\ arrives\ at\ the\ sender.\n\ pkt\ is\ the\ (possibly\ corrupted)\ packet\ sent\ from\ the\ sender.\n
comment5.params=
comment5.target=void\ timerExpired()
comment5.text=\n\ This\ routine\ will\ be\ called\ when\ the\ sender's\ timer\ expires\ (thus\ generating\ a\ timer\ interrupt).\ \n\ You'll\ probably\ want\ to\ use\ this\ routine\ to\ control\ the\ retransmission\ of\ packets.\ \n\ See\ starttimer()and\ stoptimer()\ below\ for\ how\ the\ timer\ is\ started\ and\ stopped\n
comment6.params=tl
comment6.target=void\ setTimeLine(Timeline)
comment7.params=n
comment7.target=void\ setWindowSize(int)
comment8.params=n
comment8.target=void\ setProtocol(int)
comment9.params=msg
comment9.target=void\ gbn(Message)
numComments=15
