#BlueJ class context
comment0.params=nl
comment0.target=SenderTransport(NetworkLayer)
comment1.params=
comment1.target=void\ initialize()
comment1.text=\n\ This\ routine\ will\ be\ called\ once,\ before\ any\ of\ your\ other\ sender\ routines\ are\ called.\ It\ can\ be\ used\ to\ do\ any\ required\ initialization\n
comment10.params=
comment10.target=void\ gbnResend()
comment11.params=msg
comment11.target=void\ tcp(Message)
comment11.text=\n\ Works\ much\ the\ same\ way\ as\ gbn\ as\ far\ as\ sending.\ Packet\ is\ simply\ created\ and\ sent\ on.\ \n
comment12.params=pkt
comment12.target=void\ tcpReceive(Packet)
comment12.text=\n\ \ This\ method\ decides\ what\ action\ is\ to\ be\ taken\ upon\ the\ arrival\ of\ a\ new\ ack.\n\ \ Is\ packet\ in\ order?\n
comment13.params=
comment13.target=void\ tcpResend()
comment13.text=\n\ This\ method\ resends\ the\ a\ packet\ after\ either\ a\ timeout\ or\ in\ the\ case\ of\ three\ duplicate\ acks.\n\ Retransmit\ first\ time\ after\ timeout\ only,\ fast\ retrasnmit\ after\ 3\ duplicate\ acks.\ Sender\ sends\ next\ expected\ before\ timeout\ occurs.\n
comment14.params=
comment14.target=void\ startTimer()
comment2.params=msg
comment2.target=void\ sendMessage(Message)
comment2.text=\n\ where\ message\ contains\ data\ to\ be\ sent\ to\ the\ B-side.\ This\ routine\ will\ be\ called\ whenever\ the\ upper\ layer\ at\ the\ sending\ side\ has\ a\ message\ to\ send.\ \n\ It\ is\ the\ job\ of\ your\ protocol\ to\ insure\ that\ the\ data\ in\ such\ a\ message\ is\ delivered\ in-order,\ and\ correctly,\ to\ the\ receiving\ side\ upper\ layer\n
comment3.params=pkt
comment3.target=void\ receiveMessage(Packet)
comment3.text=\n\ where\ packet\ is\ a\ structure\ of\ type\ pkt.\ This\ routine\ will\ be\ called\ whenever\ a\ packet\ sent\ from\ the\ receiver\ arrives\ at\ the\ sender.\n\ pkt\ is\ the\ (possibly\ corrupted)\ packet\ sent\ from\ the\ sender.\n
comment4.params=
comment4.target=void\ timerExpired()
comment4.text=\n\ This\ routine\ will\ be\ called\ when\ the\ sender's\ timer\ expires\ (thus\ generating\ a\ timer\ interrupt).\ \n\ You'll\ probably\ want\ to\ use\ this\ routine\ to\ control\ the\ retransmission\ of\ packets.\ \n\ See\ starttimer()and\ stoptimer()\ below\ for\ how\ the\ timer\ is\ started\ and\ stopped\n
comment5.params=tl
comment5.target=void\ setTimeLine(Timeline)
comment6.params=n
comment6.target=void\ setWindowSize(int)
comment7.params=n
comment7.target=void\ setProtocol(int)
comment8.params=msg
comment8.target=void\ gbn(Message)
comment9.params=pkt
comment9.target=void\ gbnReceive(Packet)
numComments=15
